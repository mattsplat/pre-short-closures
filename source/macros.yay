<?php

$(macro :recursion) {
    $(chain(
        buffer("("),
        functionArguments(),
        buffer(")"),
        functionReturn(),
        buffer("~>"),
        buffer("{"),
        layer() as body,
        buffer("}"),
        _() as scope
    ))
} >> function($ast) {
    return \Pre\ShortClosures\closure($ast, $implicit = false);
} >> {$$(trim(
    $(scope ? {
        [$(scope ... (, ) {$(var) = $(var) ?? null}), "fn" => function($(functionArguments ... (, ) { $$(functionArgument($(functionArgument))) })) use ($(scope ... (, ) {&$(var)}))$$(functionReturn($(functionReturn))) {
            $$(trim($(body)))
        }]["fn"]
    })

    $(scope ! {
        function($(functionArguments ... (, ) { $$(functionArgument($(functionArgument))) }))$$(functionReturn($(functionReturn))) {
            $$(trim($(body)))
        }
    })
))}

$(macro :recursion) {
    $(chain(
        buffer("("),
        functionArguments(),
        buffer(")"),
        functionReturn(),
        buffer("~>"),
        expression() as body,
        _() as scope
    ))
} >> function($ast) {
    return \Pre\ShortClosures\closure($ast, $implicit = false);
} >> {$$(trim(
    $(scope ? {
        [$(scope ... (, ) {$(var) = $(var) ?? null}), "fn" => function($(functionArguments ... (, ) { $$(functionArgument($(functionArgument))) })) use ($(scope ... (, ) {&$(var)}))$$(functionReturn($(functionReturn))) {
            return $$(trim($(body)));
        }]["fn"]
    })

    $(scope ! {
        function($(functionArguments ... (, ) { $$(functionArgument($(functionArgument))) }))$$(functionReturn($(functionReturn))) {
            return $$(trim($(body)));
        }
    })
))}

$(macro :recursion) {
    $(chain(
        token(T_VARIABLE) as functionArgumentName,
        buffer("~>"),
        expression() as body,
        _() as scope
    ))
} >> function($ast) {
    return \Pre\ShortClosures\closure($ast, $implicit = true);
} >> {$$(trim(
    $(scope ? {
        [$(scope ... (, ) {$(var) = $(var) ?? null}), "fn" => function($(functionArgumentName)) use ($(scope ... (, ) {&$(var)})) {
            return $$(trim($(body)));
        }]["fn"]
    })

    $(scope ! {
        function($(functionArgumentName)) {
            return $$(trim($(body)));
        }
    })
))}

$(macro :recursion) {
    $(chain(
        token(T_VARIABLE) as functionArgumentName,
        buffer("~>"),
        token("{"),
        layer() as body,
        token("}"),
        _() as scope
    ))
} >> function($ast) {
    return \Pre\ShortClosures\closure($ast, $implicit = true);
} >> {$$(trim(
    $(scope ? {
        [$(scope ... (, ) {$(var) = $(var) ?? null}), "fn" => function($(functionArgumentName)) use ($(scope ... (, ) {&$(var)})) {
            $$(trim($(body)))
        }]["fn"]
    })

    $(scope ! {
        function($(functionArgumentName)) {
            $$(trim($(body)))
        }
    })
))}